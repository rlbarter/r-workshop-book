{
  "hash": "db677b1ab865c3d07ccc322cfbc81d9d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R Fundamentals\"\nformat: html\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n\n\n## Doing math with R\n\nWho needs a calculator, when you have R! I legitimately use R as a basic calculator all the time. And while R can do a lot more than just compute `1 + 1`, it's worth taking a moment to discuss basic mathematical operations of R.\n\nHere are some helpful math symbols in R:\n\n* Parentheses: `(`, `)`\n* Exponents: `^` or `**`\n* Multiply: `*`\n* Divide: `/`\n* Add: `+`\n* Subtract: `-`\n\nTo follow along with the code examples that I provide in this chapter (and in this book in general), I recommend creating a new quarto document and practicing writing your own code in code chunks in your quarto document and running the code in the *console* by either pressing the green play/arrow button in the top right corner of the code chunks or using the Command+Return shortcut. Feel free to make some of your own notes in your quarto document outside. I recommend compiling/rendering your quarto document every now and then too!\n\n\nSome basic mathematical computations you can compute in R include power calculations:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(3 + 5)^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 64\n```\n\n\n:::\n:::\n\n\n\n\n\n\nDivision:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 / 7\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.2857143\n```\n\n\n:::\n:::\n\n\n\n\n\n\nNote that R doesn't really care about spaces, so this is the same as\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2/7\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.2857143\n```\n\n\n:::\n:::\n\n\n\n\n\n\nBut my recommendation is to always place a single space around mathematical operators (i.e., `*`, `+`, `-`, etc, with the exception of the power operator `^`), so:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n5 * 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n5^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25\n```\n\n\n:::\n:::\n\n\n\n\n\n\nWhen writing code, even if the language itself doesn't require certain syntax like spaces, it is a good idea to choose a syntax *style* and stick with it. \n\nYou can place multiple computations in the same code chunk, like this:\n\n\n```{{r}}\n5 + 109\n(4 + 2) * 4\n```\n\n\nWhen a code chunk contains multiple pieces of code, they will all be computed separately when you compile your document and the output will look like this:\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5 + 109\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 114\n```\n\n\n:::\n\n```{.r .cell-code}\n(4 + 2) * 4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 24\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## Code comments\n\nWhen you have multiple pieces of code in a single code chunk (or even a single piece of code), it is recommended that you use code comments to explain what your code is doing. Since R treats everything inside a code chunk as code, if you want to write some text comments inside a code chunk, you can tell R that your text is not code by placing a `#` symbol at the beginning of your text like this:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# compute 4 times 5\n4 * 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20\n```\n\n\n:::\n:::\n\n\n\n\n\n\nR will ignore anything that follows a `#` symbol. So in the above code chunk, R will ignore the first line with the code comment \"compute 4 times 5\", and then it will compute the R code on the next line, `4 * 5`. \n\n\nCode comments are really helpful for explaining what your code is doing. I usually reserve the text *outside* code chunks for more general discussion of my data, analysis, and results and I reserve code comments *inside* code chunks for explaining my code itself. Since I tend to forget the reasons behind certain decisions I made in my code, adding explanations in code comments helps me remember my motivations and intentions days, months, or even years later.\n\n\n## Scientific notation\n\nWhen doing mathematical calculations in R, very quickly you are going to start encountering some very strange-looking output. For example, if I compute\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 / 70000\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.428571e-05\n```\n\n\n:::\n:::\n\n\n\n\n\n\nor \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n12^15\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.540702e+16\n```\n\n\n:::\n:::\n\n\n\n\n\n\nYou can see that my output looks a little strange. \n\nWhen a number is very big or very small, R gets lazy and decides that it doesn't want to print all of its digits. Rather than just making up random numbers, R is printing these numbers in scientific notation. `2e-05` means \"0.00002\", i.e., there is a 2 in the 5th decimal place. On the other hand, `2e+05` (with a `+` instead of `-`), corresponds to 200000, i.e., \"2\" with 5 0's after it. \n\n\n::: {.callout-tip}\n## No commas allowed!\n\nNote that R doesn't allow for commas in numbers. If you want to write a large number, you have to remove the comma:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# this is fine\n70000\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 70000\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# this is not fine -- note the \"error\" message\n70,000\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:1:3: unexpected ','\n1: 70,\n      ^\n```\n\n\n:::\n:::\n\n\n\n\n\n\n:::\n\n\n\n\n## Mathematical functions\n\nWhile being able to do addition, subtraction, and multiplication is super awesome, sometimes you will need to use more complex mathematical operations in your computations, such as the logarithm, exponential, and square root. Fortunately, there are **functions** in R that let you compute these operations. \n\nA function is a piece of R code that is referenced using an alias or a name. A function typically takes an \"argument\", such as a number, and it does something to the argument, such as compute the logarithm, and then it returns the result.\n\nTo apply a function to a value, you write the name of the function (e.g., `log`), followed by some parentheses `()`, inside which you provide the argument or value that you want to apply the function to, as in: `log(2)`.\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# compute the square root of 2\nsqrt(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.414214\n```\n\n\n:::\n\n```{.r .cell-code}\n# compute the log of 2\nlog(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.6931472\n```\n\n\n:::\n\n```{.r .cell-code}\n# compute e^2\nexp(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7.389056\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n## Defining variables\n\n\nOne of the main features of coding in R is defining \"objects\" or \"variables\" (I use these terms interchangeably). Creating a variable essentially involves giving a value a name, allowing you to reference that value later. When we are ready to load some actual data, we will give that data a name by storing it in a variable.\n\n\nLet's store the value `1` in a variable called `my_variable` using the **assignment operator**: `my_variable <- 1`. Think of the assignment operator `<-` as an arrow, pointing from the value on the right to the variable name on the left.   \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_variable <- 1 \n```\n:::\n\n\n\n\n\n\nNote that when you define a variable, no output is shown.\n\nYou can view the value of `my_variable` by writing it's name:\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_variable\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\n\n\n\nYou can think of `my_variable` as an alias for the value `1`. This means that anything that I could do to the value `1`, I can now do to `my_variable`, such as adding `2` to it:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_variable + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n::: {.callout-tip}\n## R is case-sensitive\n\nR is case-sensitive, which means that I must write my variable name exactly as it is written. For example, the following will yield an error:\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_Variable\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'my_Variable' not found\n```\n\n\n:::\n:::\n\n\n\n\n\n\nbecause the variable is called `my_variable`, not `my_Variable`. \n\n:::\n\n\n\n::: {.callout-tip}\n## Defining variables using `=` \n\nAnother way to define a variable is using \"=\". \n\nBelow, I create `another_variable`, assign it the value `3`\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanother_variable = 3\nanother_variable \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\nHowever, convention in the R community prefers the use of the `<-` assignment operator over the `=` assignment operator. So while `=` will work just fine, it is less common among seasoned R programmers.\n\n:::\n\n\nWhenever we do a mathematical calculation using numeric values, we create a new numeric value, for example, the computation\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n\n\n\ncreates the value `2`. \n\nYou can also assign the *output* of a mathematical calculation to a variable.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# assign the output of 1 + 1 to the variable one_plus_one\none_plus_one <- 1 + 1\none_plus_one\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\nIt is important to make the distinction that `one_plus_one` does not contain the mathematical *equation* `1 + 1`. Instead, it contains the numerical value, `2`, which is the *output* of the equation `1 + 1`. \n\n`one_plus_one` doesn't remember that it was created by computing `1 + 1`, it just knows that the value it contains is `2`.\n\n\n\n\n:::: {.panel-tabset}\n\n## Exercise\n\nDefine a new object `prod` that contains the output of the product of 5 and 2. Print out `prod` by writing its name\n\n## Solution\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprod <- 5 * 2\nprod\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n:::\n\n\n\n\n\n\n::::\n\n\n\n\n\n\n\n\n\n\n\n### Overwriting variables\n\n\nBelow I define `my_number` to be a variable containing the numeric value `5`.\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_number <- 5\n```\n:::\n\n\n\n\n\n\nNext, I define a new variable called `result` that contains the product of `my_number` and `7` and I print it out:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- my_number * 7\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 35\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\nHere, `result` is defined based on the value of `my_number`. \n\nWhat do you think would happen to `result` if I redefine `my_number` to now contain `8`?\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# update the value of my_number to be 8\nmy_number <- 8\n```\n:::\n\n\n\n\n\n\nDo you think `result` will have changed? Try it yourself in RStudio or click the \"Answer\" tab below.\n\n\n\n\n:::: {.panel-tabset}\n## Question\n\nWhat happens to `result`?\n\n## Answer\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define result using `my_number`\nresult <- my_number * 7\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 56\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# modify my_number\nmy_number <- 8\n```\n:::\n\n\n\n\n\n\nResult does not change.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 56\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n::::\n\n\n\n\nWhen we defined `result <- my_number * 7`, we assigned result to the *output* of `my_number * 7`, which is `56`. \n\nOnce it has been defined, `result` forgets all about `my_number`, it just remembers the value `56`. \n\nThis means that changing `my_number` *after* having defined `result` will have no effect on `result`. There is no link between the two variables, even though `result` was originally defined using `my_number`!\n\n\n\n\n\n\n:::: {.panel-tabset}\n## Exercise\n\nWithout running the code below, guess what the output/result will be:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvalue <- 1\ncomputed_result <- value * 10 + 3^2\nvalue <- value + 2\ncomputed_result \n```\n:::\n\n\n\n\n\n\n\n## Solution\n\nNote that the first three lines of code all involve defining variables and so no output is shown when these are run. The final line of code will print out the value of `computed_result`.\n\nThe second line `computed_result <- value * 10 + 3^2` defines `computed_result` using `value`. Then the third line `value <- value + 2` updates value. Since `computed_result` is assigned to the *output* of `value * 10 + 3^2`, which is `19`, it doesn't care when `value` is subsequently updated, and so the `computed_result` is still just equal to `19`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvalue <- 1\ncomputed_result <- value * 10 + 3^2\nvalue <- value + 2\ncomputed_result \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19\n```\n\n\n:::\n:::\n\n\n\n\n\n::::\n\n\n\n\n\n\n\n### Variable names\n\n\nWhile you can give your variables *almost* any name you like, there are a few rules that you need to follow. \n\nWhile variable names can contain letters, numbers, underscores, and periods, the recommended convention specifies that variable names should contain purely **lowercase letters and numbers, with words separated by underscores**. \n\nFor example, `var_name` and `my_var` are considered \"good\" variable names, whereas `varName`, `VarName`, and `var.name` are not.\n\nNote that variable names cannot *begin* with numbers or underscores. If you try to create variables whose names are illegal, you will get an error, such as:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1plus1 <- 1 + 1\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:1:2: unexpected symbol\n1: 1plus1\n     ^\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n_var <- 1 + 1\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:1:2: unexpected symbol\n1: _var\n     ^\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n:::: {.panel-tabset}\n\n## Exercise\n\nWhich of the following are valid R variable names? Which ones are *good* variable names?\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin_height\nmax.height\n_age\nMaxLength\nmin-length\n2widths\n```\n:::\n\n\n\n\n\n\n\n## Solution\n\n- `min_height`: this is a **good** variable name\n\n- `max.height`: this is a **valid** variable name, but not necessarily a \"good\" variable name (words should be separated with `_`, not `.`)\n\n- `_age`: this is **not a valid** variable name (variable names cannot start with `_`)\n\n- `MaxLength`: this is a **valid** variable name, but not necessarily a \"good\" variable name (words should be lowercase and separated with underscores)\n\n- `min-length`: this is **not a valid** variable name (words should be separated with `_`, not the minus sign `-`)\n\n- `2widths`: this is **not a valid** variable name (variable names cannot start with numbers)\n::::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}